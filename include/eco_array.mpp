module;

#include <cassert>

#define contract_assert assert

export module eco:array;

import std;
import :extent;

namespace eco::inline cpp23 {

export template
<
  typename T,
  auto ga = default_array_growth,
  auto& alloc = default_array_alloc
>
class array
{
public:
  using value_type = T;
  using ssize_type = ssize_t<memory_view>;

private:
  extent<T, ssize_type, std::monostate, default_array_copy<T>, ga, alloc> header;

  template <typename I, typename S>
  struct writer
  {
    I first;
    S last;

    [[nodiscard]] explicit constexpr
    writer(I f, S l)
      : first{f}, last{l}
    {}

    constexpr void
    operator()(T* dst)
    {
      static_assert(std::indirectly_copyable<T*, T*>);
      default_array_copy<T>.copy(first, last, dst);
    }
  };

  [[nodiscard]] constexpr auto
  is_full() const noexcept -> bool
  {
    return (header.unused_capacity() == 0);
  }

public:
  [[nodiscard]] constexpr
  array() noexcept = default;

  [[nodiscard]] explicit constexpr
  array(ssize_type capacity)
    : header{capacity}
  {}

  template <std::ranges::forward_range R>
    requires
      (!std::same_as<R, array>) &&
      std::constructible_from<T, std::ranges::range_value_t<R>>
  [[nodiscard]] explicit constexpr
  array(R&& range)
    : header{std::ranges::ssize(range)}
  {
    header.insert_space(
      capacity(),
      writer{std::ranges::begin(range), std::ranges::end(range)}
    );

    contract_assert(size() == std::ranges::ssize(range));
    contract_assert(is_full());
  }

  template <std::ranges::forward_range R>
    requires
      (!std::same_as<R, array>) &&
      std::constructible_from<T, std::ranges::range_value_t<R>>
  constexpr auto
  operator=(R&& range) -> array&
  {
    auto const n_elements{std::ranges::ssize(range)};
    if (capacity() < n_elements) {
      array temp{range};
      swap(temp);

      contract_assert(is_full());
    } else if (header) {
      header.erase_space(header.begin(), header.size());
      header.insert_space(n_elements, writer{std::ranges::begin(range), std::ranges::end(range)});

      contract_assert(capacity() >= size());
    }
    return *this;
  }

  [[nodiscard]] friend constexpr auto
  operator==(array const& x, array const& y) -> bool
    requires std::indirectly_comparable<T const*, T const*, std::ranges::equal_to>
  {
    return x.header == y.header;
  }

  [[nodiscard]] friend constexpr auto
  operator!=(array const& x, array const& y) -> bool
    requires std::indirectly_comparable<T const*, T const*, std::ranges::equal_to>
  {
    return x.header != y.header;
  }

  [[nodiscard]] friend constexpr auto
  operator<(array const& x, array const& y) -> bool
    requires std::indirect_strict_weak_order<std::ranges::less, T const*>
  {
    return x.header < y.header;
  }

  [[nodiscard]] friend constexpr auto
  operator>=(array const& x, array const& y) -> bool
    requires std::indirect_strict_weak_order<std::ranges::less, T const*>
  {
    return x.header >= y.header;
  }

  [[nodiscard]] friend constexpr auto
  operator>(array const& x, array const& y) -> bool
    requires std::indirect_strict_weak_order<std::ranges::less, T const*>
  {
    return x.header > y.header;
  }

  [[nodiscard]] friend constexpr auto
  operator<=(array const& x, array const& y) -> bool
    requires std::indirect_strict_weak_order<std::ranges::less, T const*>
  {
    return x.header <= y.header;
  }

  constexpr void
  swap(array& x) noexcept
  {
    header.swap(x.header);
  }

  [[nodiscard]] explicit constexpr
  operator bool() const noexcept
  {
    return static_cast<bool>(header);
  }

  [[nodiscard]] constexpr auto
  operator[](ssize_type n) noexcept -> T&
  {
    contract_assert(n < size());

    return *(header.begin() + n);
  }

  [[nodiscard]] constexpr auto
  operator[](ssize_type n) const noexcept -> T const&
  {
    contract_assert(n < size());

    return *(header.begin() + n);
  }

  [[nodiscard]] constexpr auto
  begin() noexcept -> T*
  {
    return header.begin();
  }

  [[nodiscard]] constexpr auto
  begin() const noexcept -> T const*
  {
    return header.begin();
  }

  [[nodiscard]] constexpr auto
  end() noexcept -> T*
  {
    return header.end();
  }

  [[nodiscard]] constexpr auto
  end() const noexcept -> T const*
  {
    return header.end();
  }

  [[nodiscard]] constexpr auto
  size() const noexcept -> ssize_type
  {
    return header.size();
  }

  [[nodiscard]] constexpr auto
  max_size() const noexcept -> ssize_type
  {
    return std::numeric_limits<ssize_type>::max() / sizeof(T);
  }

  [[nodiscard]] constexpr auto
  capacity() const noexcept -> ssize_type
  {
    return header.capacity();
  }

  constexpr void
  set_capacity(ssize_type cap)
  {
    if (capacity() < cap) {
      header.set_unused_capacity(cap - size());
    }

    contract_assert(capacity() >= cap);
  }

  constexpr void
  reset_capacity()
  {
    if (!is_full()) {
      if (*this) {
        header.set_unused_capacity(0);
      } else {
        header = {};
      }
    }

    contract_assert(is_full());
  }

  template <typename... Args>
    requires std::constructible_from<T, Args...>
  constexpr auto
  push_back(Args &&...args) -> T&
  {
    return header.push_back(std::forward<Args>(args)...);

    // post axiom: bool{*this};
  }

  constexpr void
  pop_back() noexcept
  {
    contract_assert(bool{*this});

    header.pop_back();
  }

  template <std::ranges::forward_range R>
    requires std::constructible_from<T, std::ranges::range_value_t<R>>
  constexpr auto
  append(R&& range) -> T*
  {
    // pre axiom: "range not overlapped with [begin(), end())"

    auto const n_elements{std::ranges::distance(range)};
    set_capacity(size() + n_elements);
    return header.insert_space(n_elements, writer{std::ranges::begin(range), std::ranges::end(range)});
  }

  template <typename... Args>
    requires std::constructible_from<T, Args...>
  constexpr auto
  insert(T const* pos, Args &&...args) -> T*
  {
    // pre axiom: "pos within [begin(), end()]"

    auto df{pos - begin()};
    auto dm{size()};
    push_back(std::forward<Args>(args)...);
    return std::rotate(begin() + df, begin() + dm, end());

    // post axiom: bool{*this}
  }

  template <std::ranges::forward_range R>
    requires std::constructible_from<T, std::ranges::range_value_t<R>>
  constexpr auto
  insert(T const* pos, R&& range) -> T*
  {
    // pre axiom: "pos within [begin(), end()]"
    // pre axiom: "range not overlapped with [begin(), end())"

    auto const df{pos - begin()};
    auto const dm{size()};
    append(std::forward<R>(range));
    return std::rotate(begin() + df, begin() + dm, end());
  }

  constexpr auto
  erase(T const* pos) noexcept -> T*
  {
    contract_assert(bool{*this});
    // pre axiom: "pos within [begin(), end())"

    header.erase_space(const_cast<T*>(pos), 1);
    return const_cast<T*>(pos);

    // post axiom: "capacity() unchanged"
  }

  template <std::ranges::range R>
    requires std::same_as<T, std::ranges::range_value_t<R>>
  constexpr auto
  erase(R&& range) noexcept -> T*
  {
    // pre axiom: "range within [begin(), end())"

    auto const pos{std::ranges::begin(range)};
    header.erase_space(pos, std::ranges::ssize(range));
    return pos;

    // post axiom: "capacity() unchanged"
  }

  constexpr void
  clear() noexcept
  {
    header.erase_space(begin(), size());

    // post axiom: "capacity() unchanged"
  }
};

export template <std::ranges::forward_range R>
array(R&& range)->array<std::ranges::range_value_t<R>>;

static_assert(std::totally_ordered<array<int>>);
static_assert(std::ranges::contiguous_range<array<int>>);

export template <typename T, auto ga, auto& alloc>
constexpr void
swap(array<T, ga, alloc>& x, array<T, ga, alloc>& y) noexcept
{
  x.swap(y);
}

export template <std::copy_constructible T, auto ga, auto& alloc>
constexpr void
set_size(array<T, ga, alloc>& x, ssize_t<array<T, ga, alloc>> size, value_t<array<T, ga, alloc>> const& value = T{})
{
  if (x.size() < size) {
    x.set_capacity(size);
    size = size - x.size();
    while (size != 0) {
      x.push_back(value);
      --size;
    }
  } else if (x.size() > size) {
    size = x.size() - size;
    while (size != 0) {
      x.pop_back();
      --size;
    }
  }
}

}

namespace std {

export template <typename T, auto ga, auto& alloc>
constexpr void
swap(eco::array<T, ga, alloc>& x, eco::array<T, ga, alloc>& y) noexcept
{
  using eco::swap;
  swap(x, y);
}

}
