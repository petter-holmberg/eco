module;

#include <cassert>

#define contract_assert assert

export module eco:ordinal_tree;

import std;
import :bitvector;
import :parentheses;

namespace eco::inline cpp23 {

export template <bitvector B = basic_bitvector<>>
class louds
{
  B bits;

public:
  using ssize_type = ssize_t<B>;
  using index_type = ssize_t<B>;

  [[nodiscard]] constexpr
  louds()
    : bits{2}
  {
    bits.bitset(0);
  }

  template <linked_bicursor cur>
  [[nodiscard]] constexpr
  louds(cur root, cur nil, ssize_type n)
    : bits{2 * n + 1}
  {
    auto head{root};
    auto tail{root};
    bits.bit_set(0);
    ssize_type i{2};
    ssize_type j{0};
    while (head) {
      set_right_successor(tail, left_successor(head));
      while (has_right_successor(tail)) {
        bits.bit_set(i);
        ++i;
        tail = right_successor(tail);
      }
      ++i;
      cur parent{head};
      head = right_successor(head);
      if (!bits.bit_read(j + 1)) {
        set_right_successor(parent, nil);
        ++j;
      }
      ++j;
    }
    bits.init();
  }

  [[nodiscard]] constexpr auto
  root() const noexcept -> ssize_type
  {
    return 2;
  }

  [[nodiscard]] constexpr auto
  first_child(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(!is_leaf(v));

    return child(v, 0);
  }

  [[nodiscard]] constexpr auto
  last_child(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(!is_leaf(v));

    return child(v, children(v) - 1);
  }

  [[nodiscard]] constexpr auto
  next_sibling(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(v != root() && v != last_child(parent(v)));

    return succ_0(bits, v) + 1;
  }

  [[nodiscard]] constexpr auto
  prev_sibling(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(v != root() && v != first_child(parent(v)));

    return pred_0(bits, v - 2) + 1;
  }

  [[nodiscard]] constexpr auto
  parent(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(v != root());

    return pred_0(bits, bits.select_1(bits.rank_0(v - 1))) + 1;
  }

  [[nodiscard]] constexpr auto
  is_leaf(ssize_type v) const noexcept -> bool
  {
    return !bits.bit_read(v);
  }

  [[nodiscard]] constexpr auto
  node_map(ssize_type v) const noexcept -> index_type
  {
    return bits.rank_0(v - 1);
  }

  [[nodiscard]] constexpr auto
  node_select(index_type i) const noexcept -> ssize_type
  {
    return bits.select_0(i) + 1;
  }

  [[nodiscard]] constexpr auto
  children(ssize_type v) const noexcept -> ssize_type
  {
    return succ_0(bits, v) - v;
  }

  [[nodiscard]] constexpr auto
  child(ssize_type v, ssize_type n) const noexcept -> ssize_type
  {
    contract_assert(n >= 0 && n < children(v));

    return bits.select_0(bits.rank_1(v + n)) + 1;
  }

  [[nodiscard]] constexpr auto
  child_rank(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(v != root());

    const auto j = bits.select_1(bits.rank_0(v) - 1);
    return j - pred_0(bits, j) - 1;
  }

  [[nodiscard]] constexpr auto
  lca(ssize_type u, ssize_type v) const noexcept -> ssize_type
  {
    while (u != v) {
      if (u > v) u = parent(u); else v = parent(v);
    }
    return u;
  }

  class iterator
  {
    louds const* tree{};
    ssize_type node{};
    bool trailing{};

  public:
    using iterator_concept = std::bidirectional_iterator_tag;
    using value_type = ssize_type;
    using difference_type = ssize_type;

    constexpr
    iterator() = default;

    constexpr
    iterator(louds const* t, ssize_type n, bool tr)
      : tree{t}, node{n}, trailing{tr}
    {}

    [[nodiscard]] friend constexpr auto
    operator==(iterator const& i, iterator const& j) -> bool = default;

    [[nodiscard]] explicit constexpr
    operator bool() const noexcept
    {
      return trailing;
    }

    [[nodiscard]] constexpr auto
    operator*() const -> value_type
    {
      return node;
    }

    constexpr auto
    operator++() -> iterator&
    {
      if (trailing) {
        contract_assert(node != tree->root());

        auto parent = tree->parent(node);
        if (node == tree->last_child(parent)) {
          node = parent;
        } else {
          trailing = false;
          node = tree->next_sibling(node);
        }
      } else {
        if (tree->is_leaf(node)) {
          trailing = true;
        } else {
          node = tree->first_child(node);
        }
      }
      return *this;
    }

    constexpr auto
    operator++(int) -> iterator
    {
      auto i{*this};
      ++(*this);
      return i;
    }

    constexpr auto
    operator--() -> iterator&
    {
      if (trailing) {
        if (tree->is_leaf(node)) {
          trailing = false;
        } else {
          node = tree->last_child(node);
        }
      } else {
        contract_assert(node != tree->root());

        auto parent = tree->parent(node);
        if (node == tree->first_child(parent)) {
          node = parent;
        } else {
          trailing = true;
          node = tree->prev_sibling(node);
        }
      }
      return *this;
    }

    constexpr auto
    operator--(int) -> iterator
    {
      auto i{*this};
      --(*this);
      return i;
    }
  };

  [[nodiscard]] constexpr auto
  begin() const noexcept -> iterator
  {
    if (is_leaf(root())) {
      return end();
    } else {
      return {this, first_child(root()), false};
    }
  }

  [[nodiscard]] constexpr auto
  end() const noexcept -> iterator
  {
    return iterator{this, root(), true};
  }
};

static_assert(std::bidirectional_iterator<louds<basic_bitvector<>>::iterator>);

export template <parentheses P = basic_parentheses<>>
class bp_tree
{
  P par;

public:
  using ssize_type = ssize_t<P>;
  using index_type = ssize_t<P>;

  [[nodiscard]] constexpr
  bp_tree()
    : par{1}
  {}

  template <std::input_iterator I, std::sized_sentinel_for<I> S>
    requires boolean_testable<std::iter_value_t<I>>
  constexpr
  bp_tree(I first, S last) noexcept
    : par{std::move(first), std::move(last)}
  {}

  [[nodiscard]] constexpr auto
  root() const noexcept -> ssize_type
  {
    return 0;
  }

  [[nodiscard]] constexpr auto
  first_child(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(v >= 0 && v < par.size() - 1);

    return v + 1;
  }

  [[nodiscard]] constexpr auto
  last_child(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(v >= 0 && v < par.size() - 1);

    return find_opening(par, find_closing(par, v) - 1);
  }

  [[nodiscard]] constexpr auto
  next_sibling(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(v >= 0 && v < par.size() - 1);

    return find_closing(par, v) + 1;
  }

  [[nodiscard]] constexpr auto
  prev_sibling(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(v >= 0 && v < par.size() - 1);

    return find_opening(par, v - 1);
  }

  [[nodiscard]] constexpr auto
  parent(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(v != root());

    return find_enclosing(par, v);
  }

  [[nodiscard]] constexpr auto
  is_leaf(ssize_type v) const noexcept -> bool
  {
    return par.is_closing(v + 1);
  }

  [[nodiscard]] constexpr auto
  node_map(ssize_type v) const noexcept -> index_type
  {
    return par.rank_0(v);
  }

  [[nodiscard]] constexpr auto
  node_select(index_type i) const noexcept -> ssize_type
  {
    return par.select_0(i);
  }

  [[nodiscard]] constexpr auto
  preorder(index_type v) const noexcept -> ssize_type
  {
    return node_map(v);
  }

  [[nodiscard]] constexpr auto
  preorder_select(index_type i) const noexcept -> ssize_type
  {
    return node_select(i);
  }

  [[nodiscard]] constexpr auto
  postorder(index_type v) const noexcept -> ssize_type
  {
    return par.rank_1(find_closing(par, v));
  }

  [[nodiscard]] constexpr auto
  postorder_select(index_type i) const noexcept -> ssize_type
  {
    return find_opening(par, par.select_1(i));
  }

  [[nodiscard]] constexpr auto
  depth(index_type v) const noexcept -> ssize_type
  {
    return 2 * par.rank_0(v) - v + 1;
  }

  [[nodiscard]] constexpr auto
  subtree(index_type v) const noexcept -> ssize_type
  {
    return ((find_closing(par, v) - v + 1) / 2) - 1;
  }

  [[nodiscard]] constexpr auto
  is_ancestor(index_type u, index_type v) const noexcept -> bool
  {
    return (u <= v) && (v <= find_closing(par, u));
  }

  [[nodiscard]] constexpr auto
  level_ancestor(index_type v, index_type d) const noexcept -> ssize_type
  {
    return find_excess_backward(par, v, -d - 1) + 1;
  }

  [[nodiscard]] constexpr auto
  deepest_node(index_type v) const noexcept -> ssize_type
  {
    return par.segment_max(v, find_closing(par, v));
  }

  [[nodiscard]] constexpr auto
  height(index_type v) const noexcept -> ssize_type
  {
    return depth(deepest_node(v)) - depth(v);
  }

  [[nodiscard]] constexpr auto
  children(ssize_type v) const noexcept -> ssize_type
  {
    return par.segment_min_count(v, find_closing(par, v) - 2);
  }

  [[nodiscard]] constexpr auto
  child(ssize_type v, ssize_type n) const noexcept -> ssize_type
  {
    contract_assert(n >= 0 && n < children(v));

    return par.segment_min_select(v, find_closing(par, v) - 2, n) + 1;
  }

  [[nodiscard]] constexpr auto
  child_rank(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(v != root());

    return par.segment_min_count(find_enclosing(par, v), v);
  }

  [[nodiscard]] constexpr auto
  lca(ssize_type u, ssize_type v) const noexcept -> ssize_type
  {
    if (v < u) {
      return find_enclosing(par, par.segment_min(v, u) + 1);
    } else {
      return find_enclosing(par, par.segment_min(u, v) + 1);
    }
  }

  class iterator
  {
    bp_tree const* tree{};
    ssize_type node{};
    bool trailing{};

  public:
    using iterator_concept = std::bidirectional_iterator_tag;
    using value_type = ssize_type;
    using difference_type = ssize_type;

    constexpr
    iterator() = default;

    constexpr
    iterator(bp_tree const* t, ssize_type n, bool tr)
      : tree{t}, node{n}, trailing{tr}
    {}

    [[nodiscard]] friend constexpr auto
    operator==(iterator const& i, iterator const& j) -> bool = default;

    [[nodiscard]] explicit constexpr
    operator bool() const noexcept
    {
      return trailing;
    }

    [[nodiscard]] constexpr auto
    operator*() const -> value_type
    {
      return node;
    }

    constexpr auto
    operator++() -> iterator&
    {
      if (trailing) {
        contract_assert(node != tree->root());

        auto parent = tree->parent(node);
        if (node == tree->last_child(parent)) {
          node = parent;
        } else {
          trailing = false;
          node = tree->next_sibling(node);
        }
      } else {
        if (tree->is_leaf(node)) {
          trailing = true;
        } else {
          node = tree->first_child(node);
        }
      }
      return *this;
    }

    constexpr auto
    operator++(int) -> iterator
    {
      auto i{*this};
      ++(*this);
      return i;
    }

    constexpr auto
    operator--() -> iterator&
    {
      if (trailing) {
        if (tree->is_leaf(node)) {
          trailing = false;
        } else {
          node = tree->last_child(node);
        }
      } else {
        contract_assert(node != tree->root());

        auto parent = tree->parent(node);
        if (node == tree->first_child(parent)) {
          node = parent;
        } else {
          trailing = true;
          node = tree->prev_sibling(node);
        }
      }
      return *this;
    }

    constexpr auto
    operator--(int) -> iterator
    {
      auto i{*this};
      --(*this);
      return i;
    }
  };

  [[nodiscard]] constexpr auto
  begin() const noexcept -> iterator
  {
    if (is_leaf(root())) {
      return end();
    } else {
      return {this, first_child(root()), false};
    }
  }

  [[nodiscard]] constexpr auto
  end() const noexcept -> iterator
  {
    return iterator{this, root(), true};
  }
};

static_assert(std::bidirectional_iterator<bp_tree<basic_parentheses<>>::iterator>);

export template <parentheses P = basic_parentheses<>>
class dfuds
{
  P par;

public:
  using ssize_type = ssize_t<P>;
  using index_type = ssize_t<P>;

  [[nodiscard]] constexpr
  dfuds()
    : par{4}
  {
    par.bitvector().bit_clear(1);
    par.bitvector().bit_set(2);
  }

  template <linked_bicursor cur>
  [[nodiscard]] constexpr
  dfuds(cur root, cur nil, ssize_type n)
    : par{2 * n + 2}
  {
    auto head{root};
    auto first_child{root};
    auto next_sibling{root};
    par.bitvector().bit_clear(1);
    par.bitvector().bit_set(2);
    ssize_type i{3};
    while (true) {
      bool set{has_right_successor(head)};
      if (set) {
        next_sibling = right_successor(head);
      }
      if (has_left_successor(head)) {
        first_child = left_successor(head);
        head = first_child;
        par.bitvector().bit_clear(i);
        ++i;
        while (has_right_successor(first_child)) {
          par.bitvector().bit_clear(i);
          ++i;
          first_child = right_successor(first_child);
        }
        if (set) {
          set_right_successor(first_child, next_sibling);
        } else {
          set_right_successor(first_child, nil);
        }
      } else {
        if (!set) {
          par.bitvector().bit_set(i);
          break;
        }
        head = next_sibling;
      }
      par.bitvector().bit_set(i);
      ++i;
    }
    par.bitvector().init();
  }

  [[nodiscard]] constexpr auto
  root() const noexcept -> ssize_type
  {
    return 3;
  }

  [[nodiscard]] constexpr auto
  first_child(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(v >= root() && v < par.size());

    return succ_1(par.bitvector(), v) + 1;
  }

  [[nodiscard]] constexpr auto
  last_child(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(v >= root() && v < par.size());

    return find_closing(par, v) + 1;
  }

  [[nodiscard]] constexpr auto
  next_sibling(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(v >= root() && v < par.size());

    return find_excess(par, v - 1, -1) + 1;
  }

  [[nodiscard]] constexpr auto
  prev_sibling(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(v >= root() && v < par.size());

    return find_closing(par, find_opening(par, v - 1) + 1) + 1;
  }

  [[nodiscard]] constexpr auto
  parent(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(v != root());

    return pred_1(par.bitvector(), find_opening(par, v - 1)) + 1;
  }

  [[nodiscard]] constexpr auto
  is_leaf(ssize_type v) const noexcept -> bool
  {
    return par.is_closing(v);
  }

  [[nodiscard]] constexpr auto
  node_map(ssize_type v) const noexcept -> index_type
  {
    return par.rank_1(v - 1);
  }

  [[nodiscard]] constexpr auto
  node_select(index_type i) const noexcept -> ssize_type
  {
    return par.select_1(i) + 1;
  }

  [[nodiscard]] constexpr auto
  preorder(index_type v) const noexcept -> ssize_type
  {
    return node_map(v);
  }

  [[nodiscard]] constexpr auto
  preorder_select(index_type i) const noexcept -> ssize_type
  {
    return node_select(i);
  }

  [[nodiscard]] constexpr auto
  subtree(index_type v) const noexcept -> ssize_type
  {
    return (find_excess(par, v - 1, -1) - v) / 2 + 1;
  }

  [[nodiscard]] constexpr auto
  is_ancestor(index_type u, index_type v) const noexcept -> bool
  {
    return (u <= v) && (v <= find_excess(par, u - 1, -1));
  }

  [[nodiscard]] constexpr auto
  children(ssize_type v) const noexcept -> ssize_type
  {
    return succ_1(par.bitvector(), v) - v;
  }

  [[nodiscard]] constexpr auto
  child(ssize_type v, ssize_type n) const noexcept -> ssize_type
  {
    contract_assert(n >= 0 && n < children(v));

    return find_closing(par, succ_1(par.bitvector(), v) - n - 1) + 1;
  }

  [[nodiscard]] constexpr auto
  child_rank(ssize_type v) const noexcept -> ssize_type
  {
    contract_assert(v != root());

    const auto p = find_opening(par, v - 1);
    return succ_1(par.bitvector(), p) - p;
  }

  [[nodiscard]] constexpr auto
  lca(ssize_type u, ssize_type v) const noexcept -> ssize_type
  {
    if (v < u) {
      return parent(par.segment_min(succ_1(par.bitvector(), v), u - 1) + 1);
    } else {
      return parent(par.segment_min(succ_1(par.bitvector(), u), v - 1) + 1);
    }
  }

  class iterator
  {
    dfuds const* tree{};
    ssize_type node{};
    bool trailing{};

  public:
    using iterator_concept = std::bidirectional_iterator_tag;
    using value_type = ssize_type;
    using difference_type = ssize_type;

    constexpr
    iterator() = default;

    constexpr
    iterator(dfuds const* t, ssize_type n, bool tr)
      : tree{t}, node{n}, trailing{tr}
    {}

    [[nodiscard]] friend constexpr auto
    operator==(iterator const& i, iterator const& j) -> bool = default;

    [[nodiscard]] explicit constexpr
    operator bool() const noexcept
    {
      return trailing;
    }

    [[nodiscard]] constexpr auto
    operator*() const -> value_type
    {
      return node;
    }

    constexpr auto
    operator++() -> iterator&
    {
      if (trailing) {
        contract_assert(node != tree->root());

        auto parent = tree->parent(node);
        if (node == tree->last_child(parent)) {
          node = parent;
        } else {
          trailing = false;
          node = tree->next_sibling(node);
        }
      } else {
        if (tree->is_leaf(node)) {
          trailing = true;
        } else {
          node = tree->first_child(node);
        }
      }
      return *this;
    }

    constexpr auto
    operator++(int) -> iterator
    {
      auto i{*this};
      ++(*this);
      return i;
    }

    constexpr auto
    operator--() -> iterator&
    {
      if (trailing) {
        if (tree->is_leaf(node)) {
          trailing = false;
        } else {
          node = tree->last_child(node);
        }
      } else {
        contract_assert(node != tree->root());

        auto parent = tree->parent(node);
        if (node == tree->first_child(parent)) {
          node = parent;
        } else {
          trailing = true;
          node = tree->prev_sibling(node);
        }
      }
      return *this;
    }

    constexpr auto
    operator--(int) -> iterator
    {
      auto i{*this};
      --(*this);
      return i;
    }
  };

  [[nodiscard]] constexpr auto
  begin() const noexcept -> iterator
  {
    if (is_leaf(root())) {
      return end();
    } else {
      return {this, first_child(root()), false};
    }
  }

  [[nodiscard]] constexpr auto
  end() const noexcept -> iterator
  {
    return iterator{this, root(), true};
  }
};

static_assert(std::bidirectional_iterator<dfuds<basic_parentheses<>>::iterator>);

}
