module;

#include <cassert>

#define contract_assert assert

export module eco:parentheses;

import std;
import :bitvector;

namespace eco::inline cpp23 {

export template <typename T>
concept parentheses =
  std::totally_ordered<T> &&
  std::constructible_from<ssize_t<T>> &&
  requires (T p, T const& cp, ssize_t<T> i) {
    { cp.size() } -> std::same_as<ssize_t<T>>;
    { cp.excess(i) } -> std::same_as<ssize_t<T>>;
    { cp.excess(i, i) } -> std::same_as<ssize_t<T>>;
  };

export template <bitvector B = basic_bitvector<>>
class basic_parentheses
{
  B bits;

public:
  using ssize_type = ssize_t<B>;

  [[nodiscard]] constexpr
  basic_parentheses() noexcept = default;

  [[nodiscard]] explicit constexpr
  basic_parentheses(ssize_type size)
    : bits{2 * size}
  {
    ssize_type i = 0;
    while (i != bits.size()) {
      bits.bit_set(i);
      i += 2;
    }
  }

  template <std::input_iterator I, std::sized_sentinel_for<I> S>
    requires boolean_testable<std::iter_value_t<I>>
  constexpr
  basic_parentheses(I first, S last) noexcept
    : bits{std::ranges::distance(first, last)}
  {
    contract_assert(bits.size() % 2 == 0);

    std::iter_difference_t<I> i = 0;
    while (first != last) {
      if (*first) {
        bits.bit_set(i);
      } else {
        bits.bit_clear(i);
      }
      ++i;
      ++first;
    }
  }

  template <std::ranges::sized_range R>
    requires
      (!std::same_as<R, basic_parentheses>) &&
      std::constructible_from<bool, std::ranges::range_value_t<R>>
  explicit constexpr
  basic_parentheses(R&& range) noexcept
    : basic_parentheses{range.begin(), range.end()}
  {}

  [[nodiscard]] constexpr auto
  operator<=>(basic_parentheses const&) const -> std::strong_ordering = default;

  [[nodiscard]] constexpr auto
  size() const noexcept -> ssize_type
  {
    return bits.size();
  }

  [[nodiscard]] constexpr auto
  is_opening(ssize_type i) const noexcept -> bool
  {
    return bits.bit_read(i) == 1;
  }

  [[nodiscard]] constexpr auto
  is_closing(ssize_type i) const noexcept -> bool
  {
    return bits.bit_read(i) == 0;
  }

  [[nodiscard]] constexpr auto
  rank_0(ssize_type i) const noexcept -> ssize_type
  {
    contract_assert(i >= 0 && i <= size());

    return bits.rank_0(i);
  }

  [[nodiscard]] constexpr auto
  rank_1(ssize_type i) const noexcept -> ssize_type
  {
    contract_assert(i >= 0 && i <= size());

    return bits.rank_1(i);
  }

  [[nodiscard]] constexpr auto
  select_0(ssize_type i) const noexcept -> ssize_type
  {
    contract_assert(i >= 0 && i <= size());

    return bits.select_0(i);
  }

  [[nodiscard]] constexpr auto
  select_1(ssize_type i) const noexcept -> ssize_type
  {
    contract_assert(i >= 0 && i <= size());

    return bits.select_1(i);
  }

  [[nodiscard]] constexpr auto
  excess(ssize_type i) const noexcept -> ssize_type
  {
    contract_assert(i >= -1);
    contract_assert(i < size());

    return 2 * bits.rank_1(i + 1) - (i + 1);
  }

  [[nodiscard]] constexpr auto
  excess(ssize_type i, ssize_type j) const noexcept -> ssize_type
  {
    contract_assert(i >= 0);
    contract_assert(j < size());
    contract_assert(i <= j);

    return excess(j) - excess(i - 1);
  }

  constexpr auto
  segment_min(ssize_type i, ssize_type j) const noexcept -> ssize_type
  {
    contract_assert(i >= 0);
    contract_assert(j < size());
    contract_assert(i <= j);

    ssize_type excess = 0;
    ssize_type min_excess = 1;
    auto k = i;
    while (i != j) {
      if (bits.bit_read(i)) {
        ++excess;
      } else {
        --excess;
      }
      if (excess < min_excess) {
        min_excess = excess;
        k = i;
      }
      ++i;
    }
    return k;
  }

  constexpr auto
  segment_max(ssize_type i, ssize_type j) const noexcept -> ssize_type
  {
    contract_assert(i >= 0);
    contract_assert(j < size());
    contract_assert(i <= j);

    ssize_type excess = 0;
    ssize_type max_excess = -1;
    auto k = i;
    while (i != j) {
      if (bits.bit_read(i)) {
        ++excess;
      } else {
        --excess;
      }
      if (excess > max_excess) {
        max_excess = excess;
        k = i;
      }
      ++i;
    }
    return k;
  }

  constexpr auto
  segment_min_count(ssize_type i, ssize_type j) const noexcept -> ssize_type
  {
    contract_assert(i >= 0);
    contract_assert(j < size());
    contract_assert(i <= j);

    ssize_type excess = 0;
    ssize_type min_excess = 1;
    ssize_type n = 0;
    while (i != j) {
      if (bits.bit_read(i)) {
        ++excess;
      } else {
        --excess;
      }
      if (excess < min_excess) {
        min_excess = excess;
        n = 1;
      } else if (excess == min_excess) {
        ++n;
      }
      ++i;
    }
    return n;
  }

  constexpr auto
  segment_min_select(ssize_type i, ssize_type j, ssize_type n) const noexcept -> ssize_type
  {
    contract_assert(i >= 0);
    contract_assert(j < size());
    contract_assert(i <= j);

    auto k = segment_min(i, j);
    if (k == j || n == 0) {
      return k;
    }
    ssize_type m = 1;
    ssize_type excess = 0;
    ++k;
    while (k != j) {
      if (bits.bit_read(k)) {
        ++excess;
      } else {
        --excess;
      }
      if (excess == 0) {
        if (m == n) {
          return k;
        }
        ++m;
      }
      ++k;
    }
    return k;
  }
};

struct find_excess_impl
{
  template <parentheses P>
  [[nodiscard]] constexpr auto
  operator()(P const& p, ssize_t<P> i, ssize_t<P> e) const noexcept -> ssize_t<P>
  {
    contract_assert(i >= 0 && i < p.size());

    auto j = i + 1;
    while (j != p.size() && p.excess(j) != p.excess(i) + e) {
      ++j;
    }
    return j;
  }
};

export inline constexpr find_excess_impl find_excess{};

struct find_excess_backward_impl
{
  template <parentheses P>
  [[nodiscard]] constexpr auto
  operator()(P const& p, ssize_t<P> i, ssize_t<P> e) const noexcept -> ssize_t<P>
  {
    contract_assert(i >= 0 && i <= p.size());

    auto j = i - 1;
    while (j != -1 && p.excess(j) != p.excess(i) + e) {
      --j;
    }
    return j;
  }
};

export inline constexpr find_excess_backward_impl find_excess_backward{};

struct find_closing_impl
{
  template <parentheses P>
  [[nodiscard]] constexpr auto
  operator()(P const& p, ssize_t<P> i) const noexcept -> ssize_t<P>
  {
    contract_assert(i >= 0 && i < p.size());

    return find_excess(p, i, -1);
  }
};

export inline constexpr find_closing_impl find_closing{};

struct find_opening_impl
{
  template <parentheses P>
  [[nodiscard]] constexpr auto
  operator()(P const& p, ssize_t<P> i) const noexcept -> ssize_t<P>
  {
    contract_assert(i >= 0 && i < p.size());

    return find_excess_backward(p, i, 0) + 1;
  }
};

export inline constexpr find_opening_impl find_opening{};

struct find_enclosing_impl
{
  template <parentheses P>
  [[nodiscard]] constexpr auto
  operator()(P const& p, ssize_t<P> i) const noexcept -> ssize_t<P>
  {
    contract_assert(i >= 0 && i < p.size());

    return find_excess_backward(p, i, -2) + 1;
  }
};

export inline constexpr find_enclosing_impl find_enclosing{};

static_assert(parentheses<basic_parentheses<>>);

}
